import type { ReactNode } from "react";
import React from "react";
import type { ConnectionArgs, ConnectionContext } from "./utils/useConnectionInternal";
import type { UseProvider } from "./utils/useProviderInternal";
import type { UseWallet, UseWalletArgs } from "./utils/useWalletInternal";
export interface UseSolana<T extends boolean = boolean> extends ConnectionContext, UseWallet<T>, UseProvider {
}
export interface UseSolanaArgs extends ConnectionArgs, Pick<UseWalletArgs, "onConnect" | "onDisconnect"> {
}
declare type ProviderProps = UseSolanaArgs & {
    children: ReactNode;
};
/**
 * Provides a Solana SDK.
 * Note: ensure that `onConnect` and `onDisconnect` are wrapped in useCallback or are
 * statically defined, otherwise the wallet will keep re-rendering.
 * @returns
 */
export declare const SolanaProvider: React.FC<ProviderProps>;
/**
 * Fetches the loaded Solana SDK.
 */
export declare const useSolana: () => UseSolana<boolean>;
export {};
//# sourceMappingURL=context.d.ts.map