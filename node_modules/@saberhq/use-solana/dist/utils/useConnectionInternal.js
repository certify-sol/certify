"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectionInternal = void 0;
const solana_contrib_1 = require("@saberhq/solana-contrib");
const web3_js_1 = require("@solana/web3.js");
const react_1 = require("react");
const useLocalStorageState_1 = require("./useLocalStorageState");
const makeNetworkConfigMap = (partial) => Object.entries(solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP).reduce((acc, [k, v]) => (Object.assign(Object.assign({}, acc), { [k]: Object.assign(Object.assign({}, v), partial[k]) })), solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP);
/**
 * Handles the connection to the Solana nodes.
 * @returns
 */
const useConnectionInternal = ({ 
// default to mainnet-beta
defaultNetwork = "mainnet-beta", networkConfigs = solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP, commitment = "recent", }) => {
    const [network, setNetwork] = (0, useLocalStorageState_1.useLocalStorageState)("use-solana/network", defaultNetwork);
    const configMap = makeNetworkConfigMap(networkConfigs);
    const config = configMap[network];
    const { endpoint, endpointWs } = config;
    const connection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, {
        commitment,
        wsEndpoint: endpointWs,
    }), [commitment, endpoint, endpointWs]);
    const sendConnection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, {
        commitment,
        wsEndpoint: endpointWs,
    }), [commitment, endpoint, endpointWs]);
    // The websocket library solana/web3.js uses closes its websocket connection when the subscription list
    // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.
    // This is a hack to prevent the list from every getting empty
    (0, react_1.useEffect)(() => {
        const id = connection.onAccountChange(web3_js_1.Keypair.generate().publicKey, () => {
            // noop
        });
        return () => {
            void connection.removeAccountChangeListener(id);
        };
    }, [connection]);
    (0, react_1.useEffect)(() => {
        const id = sendConnection.onAccountChange(web3_js_1.Keypair.generate().publicKey, () => {
            // noop
        });
        return () => {
            void sendConnection.removeAccountChangeListener(id);
        };
    }, [sendConnection]);
    (0, react_1.useEffect)(() => {
        const id = connection.onSlotChange(() => null);
        return () => {
            void connection.removeSlotChangeListener(id);
        };
    }, [connection]);
    (0, react_1.useEffect)(() => {
        const id = sendConnection.onSlotChange(() => null);
        return () => {
            void sendConnection.removeSlotChangeListener(id);
        };
    }, [sendConnection]);
    return {
        connection,
        sendConnection,
        network,
        setNetwork,
        endpoint,
    };
};
exports.useConnectionInternal = useConnectionInternal;
//# sourceMappingURL=useConnectionInternal.js.map