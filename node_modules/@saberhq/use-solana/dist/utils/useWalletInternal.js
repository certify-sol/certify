"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWalletInternal = void 0;
const tslib_1 = require("tslib");
const fast_json_stable_stringify_1 = (0, tslib_1.__importDefault)(require("fast-json-stable-stringify"));
const react_1 = require("react");
const providers_1 = require("../providers");
const useLocalStorageState_1 = require("./useLocalStorageState");
const useWalletInternal = ({ onConnect, onDisconnect, network, endpoint, }) => {
    var _a;
    const [walletConfigStr, setWalletConfigStr] = (0, useLocalStorageState_1.useLocalStorageState)("use-solana/wallet-config", null);
    const walletConfig = (0, react_1.useMemo)(() => {
        try {
            return walletConfigStr
                ? JSON.parse(walletConfigStr)
                : null;
        }
        catch (e) {
            console.warn("Error parsing wallet config", e);
            return null;
        }
    }, [walletConfigStr]);
    const { walletType, walletArgs } = walletConfig !== null && walletConfig !== void 0 ? walletConfig : {
        walletType: null,
        walletArgs: null,
    };
    const [connected, setConnected] = (0, react_1.useState)(false);
    const [walletProviderInfo, wallet] = (0, react_1.useMemo)(() => {
        if (walletType) {
            const provider = providers_1.WALLET_PROVIDERS[walletType];
            console.log("New wallet", provider.url, network);
            return [provider, new provider.makeAdapter(provider.url, endpoint)];
        }
        return [undefined, undefined];
    }, [walletType, network, endpoint]);
    (0, react_1.useEffect)(() => {
        if (wallet && walletProviderInfo) {
            setTimeout(() => {
                void wallet.connect(walletArgs).catch((e) => {
                    console.warn(`Error attempting to automatically connect to ${walletProviderInfo.name}`, e);
                });
            }, 500);
            wallet.on("connect", () => {
                if (wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) {
                    setConnected(true);
                    onConnect === null || onConnect === void 0 ? void 0 : onConnect(wallet, walletProviderInfo);
                }
            });
            wallet.on("disconnect", () => {
                setConnected(false);
                onDisconnect === null || onDisconnect === void 0 ? void 0 : onDisconnect(wallet, walletProviderInfo);
            });
        }
        return () => {
            if (wallet && wallet.connected) {
                void wallet.disconnect();
            }
        };
    }, [onConnect, onDisconnect, wallet, walletArgs, walletProviderInfo]);
    const activate = (0, react_1.useCallback)((nextWalletType, nextWalletArgs) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
        const nextWalletConfigStr = (0, fast_json_stable_stringify_1.default)({
            walletType: nextWalletType,
            walletArgs: nextWalletArgs !== null && nextWalletArgs !== void 0 ? nextWalletArgs : null,
        });
        if (walletConfigStr === nextWalletConfigStr) {
            // reconnect
            yield (wallet === null || wallet === void 0 ? void 0 : wallet.connect(nextWalletArgs));
        }
        setWalletConfigStr(nextWalletConfigStr);
    }), [setWalletConfigStr, wallet, walletConfigStr]);
    const disconnect = (0, react_1.useCallback)(() => {
        wallet === null || wallet === void 0 ? void 0 : wallet.disconnect();
        setWalletConfigStr(null);
    }, [setWalletConfigStr, wallet]);
    return {
        wallet,
        walletProviderInfo,
        connected,
        publicKey: (_a = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) !== null && _a !== void 0 ? _a : undefined,
        activate,
        disconnect,
    };
};
exports.useWalletInternal = useWalletInternal;
//# sourceMappingURL=useWalletInternal.js.map