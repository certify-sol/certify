"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathWalletAdapter = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const eventemitter3_1 = (0, tslib_1.__importDefault)(require("eventemitter3"));
const types_1 = require("../types");
class MathWalletAdapter extends eventemitter3_1.default {
    constructor() {
        super();
        this.connect = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (this._onProcess) {
                return;
            }
            if (!this._provider) {
                window.open("https://mathwallet.org/", "_blank", "noopener noreferrer");
                throw new Error("Math Wallet not installed");
            }
            this._onProcess = true;
            yield this._provider
                .getAccount()
                .then((account) => {
                this._publicKey = new web3_js_1.PublicKey(account);
                this._connected = true;
                this.emit("connect", this._publicKey);
            })
                .catch(() => {
                this.disconnect();
            })
                .finally(() => {
                this._onProcess = false;
            });
        });
        this._onProcess = false;
        this._connected = false;
    }
    get connected() {
        return this._connected;
    }
    get autoApprove() {
        return false;
    }
    signAllTransactions(transactions) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!this._provider) {
                return transactions;
            }
            return yield this._provider.signAllTransactions(transactions);
        });
    }
    get _provider() {
        var _a;
        if ((_a = window === null || window === void 0 ? void 0 : window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet) {
            return window.solana;
        }
        return undefined;
    }
    get publicKey() {
        return this._publicKey || types_1.DEFAULT_PUBLIC_KEY;
    }
    signTransaction(transaction) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!this._provider) {
                return transaction;
            }
            return this._provider.signTransaction(transaction);
        });
    }
    disconnect() {
        if (this._publicKey) {
            this._publicKey = undefined;
            this._connected = false;
            this.emit("disconnect");
        }
    }
}
exports.MathWalletAdapter = MathWalletAdapter;
//# sourceMappingURL=index.js.map