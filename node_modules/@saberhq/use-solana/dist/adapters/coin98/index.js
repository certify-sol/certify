"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coin98Adapter = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const bs58 = (0, tslib_1.__importStar)(require("bs58"));
const eventemitter3_1 = (0, tslib_1.__importDefault)(require("eventemitter3"));
const types_1 = require("../types");
class Coin98Adapter extends eventemitter3_1.default {
    constructor() {
        super();
        this.connect = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (this._onProcess) {
                return;
            }
            if (window.coin98 === undefined) {
                throw new Error("Coin98 not installed");
            }
            this._onProcess = true;
            yield window.coin98.sol
                .request({ method: "sol_accounts" })
                .then((rawAccounts) => {
                const accounts = rawAccounts;
                if (!accounts[0]) {
                    throw new Error("No accounts found.");
                }
                this._publicKey = new web3_js_1.PublicKey(accounts[0]);
                this._connected = true;
                this.emit("connect", this._publicKey);
            })
                .catch(() => {
                this.disconnect();
            })
                .finally(() => {
                this._onProcess = false;
            });
        });
        this._onProcess = false;
        this._connected = false;
    }
    get connected() {
        return this._connected;
    }
    get autoApprove() {
        return false;
    }
    signAllTransactions(transactions) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const result = [];
            for (let i = 0; i < transactions.length; i++) {
                const transaction = transactions[i];
                if (transaction) {
                    const signed = yield this.signTransaction(transaction);
                    result.push(signed);
                }
            }
            return result;
        });
    }
    get publicKey() {
        return this._publicKey || types_1.DEFAULT_PUBLIC_KEY;
    }
    signTransaction(transaction) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!window.coin98) {
                throw new Error("Coin98 not found");
            }
            const { publicKey, signature } = (yield window.coin98.sol.request({
                method: "sol_sign",
                params: [transaction],
            }));
            transaction.addSignature(new web3_js_1.PublicKey(publicKey), bs58.decode(signature));
            return transaction;
        });
    }
    disconnect() {
        var _a;
        if (this._publicKey) {
            this._publicKey = undefined;
            this._connected = false;
            (_a = window.coin98) === null || _a === void 0 ? void 0 : _a.sol.disconnect();
            this.emit("disconnect");
        }
    }
}
exports.Coin98Adapter = Coin98Adapter;
//# sourceMappingURL=index.js.map