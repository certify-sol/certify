"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhantomWalletAdapter = void 0;
const tslib_1 = require("tslib");
const eventemitter3_1 = (0, tslib_1.__importDefault)(require("eventemitter3"));
const types_1 = require("../types");
class PhantomWalletAdapter extends eventemitter3_1.default {
    constructor() {
        super();
        this._handleConnect = (...args) => {
            this.emit("connect", ...args);
        };
        this._handleDisconnect = (...args) => {
            this.emit("disconnect", ...args);
        };
        this.connect = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            var _a, _b, _c;
            if (!this._provider) {
                window.open("https://phantom.app/", "_blank", "noopener noreferrer");
                throw new Error("Phantom not installed");
            }
            if (!this._provider.listeners("connect").length) {
                (_a = this._provider) === null || _a === void 0 ? void 0 : _a.on("connect", this._handleConnect);
            }
            if (!this._provider.listeners("disconnect").length) {
                (_b = this._provider) === null || _b === void 0 ? void 0 : _b.on("disconnect", this._handleDisconnect);
            }
            yield ((_c = this._provider) === null || _c === void 0 ? void 0 : _c.connect());
        });
    }
    get _provider() {
        var _a;
        if ((_a = window === null || window === void 0 ? void 0 : window.solana) === null || _a === void 0 ? void 0 : _a.isPhantom) {
            return window.solana;
        }
        return undefined;
    }
    get connected() {
        var _a;
        return ((_a = this._provider) === null || _a === void 0 ? void 0 : _a.isConnected) || false;
    }
    get autoApprove() {
        var _a;
        return ((_a = this._provider) === null || _a === void 0 ? void 0 : _a.autoApprove) || false;
    }
    signAllTransactions(transactions) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!this._provider) {
                return transactions;
            }
            return this._provider.signAllTransactions(transactions);
        });
    }
    get publicKey() {
        var _a;
        return ((_a = this._provider) === null || _a === void 0 ? void 0 : _a.publicKey) || types_1.DEFAULT_PUBLIC_KEY;
    }
    signTransaction(transaction) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!this._provider) {
                return transaction;
            }
            return this._provider.signTransaction(transaction);
        });
    }
    disconnect() {
        if (this._provider) {
            void this._provider.disconnect();
        }
    }
}
exports.PhantomWalletAdapter = PhantomWalletAdapter;
//# sourceMappingURL=index.js.map