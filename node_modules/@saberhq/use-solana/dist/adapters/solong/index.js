"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolongWalletAdapter = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const eventemitter3_1 = (0, tslib_1.__importDefault)(require("eventemitter3"));
const types_1 = require("../types");
class SolongWalletAdapter extends eventemitter3_1.default {
    constructor() {
        super();
        this.connect = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (this._onProcess) {
                return;
            }
            if (window.solong === undefined) {
                throw new Error("Solong not installed");
            }
            this._onProcess = true;
            yield window.solong
                .selectAccount()
                .then((account) => {
                this._publicKey = new web3_js_1.PublicKey(account);
                this._connected = true;
                this.emit("connect", this._publicKey);
            })
                .catch(() => {
                this.disconnect();
            })
                .finally(() => {
                this._onProcess = false;
            });
        });
        this._onProcess = false;
        this._connected = false;
    }
    get connected() {
        return this._connected;
    }
    get autoApprove() {
        return false;
    }
    signAllTransactions(transactions) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const solong = window.solong;
            if (!solong) {
                throw new Error("Solong not found");
            }
            if (solong.signAllTransactions) {
                return solong.signAllTransactions(transactions);
            }
            else {
                const result = [];
                for (let i = 0; i < transactions.length; i++) {
                    const transaction = transactions[i];
                    if (transaction) {
                        const signed = yield solong.signTransaction(transaction);
                        result.push(signed);
                    }
                }
                return result;
            }
        });
    }
    get publicKey() {
        return this._publicKey || types_1.DEFAULT_PUBLIC_KEY;
    }
    signTransaction(transaction) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            if (!window.solong) {
                throw new Error("Solong not found");
            }
            return window.solong.signTransaction(transaction);
        });
    }
    disconnect() {
        if (this._publicKey) {
            this._publicKey = undefined;
            this._connected = false;
            this.emit("disconnect");
        }
    }
}
exports.SolongWalletAdapter = SolongWalletAdapter;
//# sourceMappingURL=index.js.map