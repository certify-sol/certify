"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSolana = exports.SolanaProvider = void 0;
const tslib_1 = require("tslib");
const react_1 = (0, tslib_1.__importDefault)(require("react"));
const unstated_next_1 = require("unstated-next");
const useConnectionInternal_1 = require("./utils/useConnectionInternal");
const useProviderInternal_1 = require("./utils/useProviderInternal");
const useWalletInternal_1 = require("./utils/useWalletInternal");
/**
 * Provides Solana.
 * @returns
 */
const useSolanaInternal = (_a = {}) => {
    var { onConnect, onDisconnect } = _a, connectionArgs = (0, tslib_1.__rest)(_a, ["onConnect", "onDisconnect"]);
    const connectionCtx = (0, useConnectionInternal_1.useConnectionInternal)(connectionArgs);
    const { network, endpoint } = connectionCtx;
    const walletCtx = (0, useWalletInternal_1.useWalletInternal)({
        onConnect,
        onDisconnect,
        network,
        endpoint,
    });
    const providerCtx = (0, useProviderInternal_1.useProviderInternal)({
        connection: connectionCtx.connection,
        wallet: walletCtx.wallet,
    });
    return Object.assign(Object.assign(Object.assign({}, walletCtx), connectionCtx), providerCtx);
};
const Solana = (0, unstated_next_1.createContainer)(useSolanaInternal);
/**
 * Provides a Solana SDK.
 * Note: ensure that `onConnect` and `onDisconnect` are wrapped in useCallback or are
 * statically defined, otherwise the wallet will keep re-rendering.
 * @returns
 */
const SolanaProvider = (_a) => {
    var { children } = _a, args = (0, tslib_1.__rest)(_a, ["children"]);
    return (react_1.default.createElement(Solana.Provider, { initialState: args }, children));
};
exports.SolanaProvider = SolanaProvider;
/**
 * Fetches the loaded Solana SDK.
 */
exports.useSolana = Solana.useContainer;
//# sourceMappingURL=context.js.map