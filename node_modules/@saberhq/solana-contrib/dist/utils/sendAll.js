"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendAll = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
/**
 * Similar to `send`, but for an array of transactions and signers.
 */
const sendAll = ({ provider, reqs, opts, confirm = true, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
    const blockhash = yield provider.sendConnection.getRecentBlockhash(opts.preflightCommitment);
    const txs = reqs.map((r) => {
        const tx = r.tx;
        let signers = r.signers;
        if (signers === undefined) {
            signers = [];
        }
        tx.feePayer = provider.wallet.publicKey;
        tx.recentBlockhash = blockhash.blockhash;
        signers
            .filter((s) => s !== undefined)
            .forEach((kp) => {
            tx.partialSign(kp);
        });
        return tx;
    });
    const signedTxs = yield provider.wallet.signAllTransactions(txs);
    const sigs = [];
    yield Promise.all(txs.map((_, i) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {
        const tx = signedTxs[i];
        if (!tx) {
            throw new Error(`tx ${i} missing in signed txs response from provider`);
        }
        const rawTx = tx.serialize();
        if (confirm) {
            sigs.push(yield (0, web3_js_1.sendAndConfirmRawTransaction)(provider.sendConnection, rawTx, opts));
        }
        else {
            sigs.push(yield provider.sendConnection.sendRawTransaction(rawTx, opts));
        }
    })));
    return sigs;
});
exports.sendAll = sendAll;
//# sourceMappingURL=sendAll.js.map